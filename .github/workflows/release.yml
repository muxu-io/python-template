# Release Workflow
# Handles semantic versioning and tag creation when changes are pushed to main branches.
# Automatically skips duplicate runs when semantic-release creates its own commits.
# Expected workflow sequence: Checks → Release → Publish

name: Release
run-name: Release

on:
  push:
    branches: [master, main, maint]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    # Skip if triggered by tag push or by semantic-release's own commits
    # This prevents duplicate runs when semantic-release creates version commits
    # Note: Skipped workflows will appear in the UI, which is expected behavior
    if: github.ref_type != 'tag' && github.event.head_commit.author.email != 'semantic-release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Note: this must be done differently in an organization account
          # as we can bypass the specific actor_id
          token: ${{ secrets.SEMANTIC_RELEASE_ADMIN_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Semantic Release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release build twine

      - name: Run Semantic Release
        id: semantic
        run: |
          echo "🚀 Running semantic-release..."

          # Run semantic-release version to analyze commits and create new version/tag if needed
          if semantic-release version 2>&1 | tee /tmp/semantic-release.log; then
            echo "✅ Version analysis completed, now publishing release..."
            # Run publish to create GitHub release
            semantic-release publish 2>&1 | tee -a /tmp/semantic-release.log
            echo "✅ Semantic-release completed successfully"

            # Check if a release was actually made by looking for version in git tags
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
            if [[ "$LATEST_TAG" != "none" ]]; then
              VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
              echo "released=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
              echo "📦 Released version: $VERSION"
            else
              echo "released=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No release was made"
            fi
          else
            echo "❌ Semantic-release failed"
            echo "released=false" >> $GITHUB_OUTPUT
          fi

          echo "📋 Semantic-release log:"
          cat /tmp/semantic-release.log || echo "No log available"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}